name: Build
on:
  push:
    branches:
     - master
  pull_request:
    branches:
     - master
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-latest, windows-latest]
        include:
          - os: windows-latest
            os_short: win
            compiler_cc: msvc
          - os: ubuntu-latest
            os_short: linux
            compiler_cc: clang
            compiler_cxx: clang++
          - os: ubuntu-22.04
            os_short: oldlinux
            compiler_cc: clang-8
            compiler_cxx: clang++-8
      fail-fast: false

    name: Build Project ${{ matrix.os_short }}
    runs-on: ${{ matrix.os }}
    env:
      SDKS: '["l4d","l4d2"]'

    steps:
      - name: Setup Environment
        shell: bash
        run: |
          echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV
          
      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y g++-multilib ${{ matrix.compiler_cc }}

      - name: Select clang compiler
        if: runner.os == 'Linux'
        run: |
          echo "CC=${{ matrix.compiler_cc }}" >> $GITHUB_ENV
          echo "CXX=${{ matrix.compiler_cxx }}" >> $GITHUB_ENV
          ${{ matrix.compiler_cc }} --version
          ${{ matrix.compiler_cxx }} --version
  
      - name: Add msbuild to PATH
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2
        
      - name: Install Windows Dependencies
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          :: See https://github.com/microsoft/vswhere/wiki/Find-VC
          for /f "usebackq delims=*" %%i in (`vswhere -latest -property installationPath`) do (
            call "%%i"\Common7\Tools\vsdevcmd.bat -arch=x86 -host_arch=x64
          )
          
          :: Loop over all environment variables and make them global.
          for /f "delims== tokens=1,2" %%a in ('set') do (
            echo>>"%GITHUB_ENV%" %%a=%%b
          )
            
      - uses: actions/setup-python@v5
        name: Setup Python 3.8
        with:
          python-version: 3.8
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
  
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: src
  
      - name: Prepare Alliedmodders Directory
        shell: bash
        run: |
          mkdir alliedmodders

      - name: Prepare Sourcemod
        working-directory: alliedmodders
        run: |
          git clone --recursive https://github.com/alliedmodders/sourcemod -b 1.11-dev

      - name: Prepare L4D SDK
        working-directory: alliedmodders
        run: |
          git clone --mirror https://github.com/alliedmodders/hl2sdk hl2sdk-proxy-repo
          git clone hl2sdk-proxy-repo hl2sdk-l4d2 -b l4d2
          git clone hl2sdk-proxy-repo hl2sdk-l4d -b l4d
          
      - name: Prepare Metamod Source
        working-directory: alliedmodders
        run: |
          git clone https://github.com/alliedmodders/metamod-source mmsource-1.10 -b 1.10-dev

      - name: Install AMBuild
        working-directory: alliedmodders
        run: |
          git clone https://github.com/alliedmodders/ambuild
          pip install ./ambuild

      - name: Run AMBuild
        working-directory: src
        shell: bash
        run: |
          cd extension
          mkdir build
          cd build
          python ../configure.py \
            --hl2sdk-root="${{ github.workspace }}/alliedmodders" \
            --sm-path="${{ github.workspace }}/alliedmodders/sourcemod" \
            --mms-path="${{ github.workspace }}/alliedmodders/mmsource-1.10" \
            --sdks=${{ join(fromJSON(env.SDKS)) }}
          ambuild

      - name: Copy to addons directory
        working-directory: src
        shell: bash
        run: |
          cp -r extension/build/package/addons/sourcemod/extensions addons/sourcemod

      - name: Upload Binary (Package)
        uses: actions/upload-artifact@v4
        with:
          name: sendproxy-${{ matrix.os_short }}
          path: src/addons